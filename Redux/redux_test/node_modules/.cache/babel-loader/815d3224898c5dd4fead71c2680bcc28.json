{"ast":null,"code":"//count_action_creator\n//每个组件都有一个\n//该文件专门为Count组件生成action对象\nimport { INCREMENT, DECREMENT } from \"../constant\"; // function createIncrementAction(data){\n//     // data key和value同名就可以这样写\n//     return {type:'increment',data}\n// }\n// const createIncrementAction = data => {return {type:'increment',data}}\n\nexport const createIncrementAction = data => ({\n  type: INCREMENT,\n  data\n}); // function createDecrementAction(data){\n//     return {type:'decrement',data}\n// }\n\nexport const createDecrementAction = data => ({\n  type: DECREMENT,\n  data\n}); //异步action\n\nexport const createIncrementAsyncAction = (data, time) => {\n  //返回一个函数，但是这个函数并没有被调用\n  //store比较守旧，他一直要的都是plain object\n  //此时我们就需要一个中间件 redux-thunk，然后store就可以帮你调用这个函数，形参直接就是dispatch可以\n  //异步action中一般回调用同步action，可以发现异步action不是一定要用的，客人可以直接等5分钟再报菜名\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(createIncrementAction(data));\n    }, time);\n  };\n};","map":{"version":3,"sources":["/Users/dyq/Desktop/react/Redux/redux_test/src/redux/actions/count.js"],"names":["INCREMENT","DECREMENT","createIncrementAction","data","type","createDecrementAction","createIncrementAsyncAction","time","dispatch","setTimeout"],"mappings":"AACA;AACA;AACA;AAEA,SAASA,SAAT,EAAmBC,SAAnB,QAAoC,aAApC,C,CAGA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,qBAAqB,GAAGC,IAAI,KAAK;AAACC,EAAAA,IAAI,EAACJ,SAAN;AAAgBG,EAAAA;AAAhB,CAAL,CAAlC,C,CAGP;AACA;AACA;;AAEA,OAAO,MAAME,qBAAqB,GAAGF,IAAI,KAAK;AAACC,EAAAA,IAAI,EAACH,SAAN;AAAgBE,EAAAA;AAAhB,CAAL,CAAlC,C,CAIP;;AACA,OAAO,MAAMG,0BAA0B,GAAG,CAACH,IAAD,EAAMI,IAAN,KAAc;AACpD;AACA;AACA;AACA;AACA,SAAQC,QAAD,IAAc;AACjBC,IAAAA,UAAU,CAAC,MAAM;AACbD,MAAAA,QAAQ,CAACN,qBAAqB,CAACC,IAAD,CAAtB,CAAR;AACH,KAFS,EAERI,IAFQ,CAAV;AAIH,GALD;AAMH,CAXM","sourcesContent":["\n//count_action_creator\n//每个组件都有一个\n//该文件专门为Count组件生成action对象\n\nimport { INCREMENT,DECREMENT } from \"../constant\"\n\n\n// function createIncrementAction(data){\n//     // data key和value同名就可以这样写\n//     return {type:'increment',data}\n// }\n\n// const createIncrementAction = data => {return {type:'increment',data}}\nexport const createIncrementAction = data => ({type:INCREMENT,data})\n\n\n// function createDecrementAction(data){\n//     return {type:'decrement',data}\n// }\n\nexport const createDecrementAction = data => ({type:DECREMENT,data})\n\n\n\n//异步action\nexport const createIncrementAsyncAction = (data,time)=> {\n    //返回一个函数，但是这个函数并没有被调用\n    //store比较守旧，他一直要的都是plain object\n    //此时我们就需要一个中间件 redux-thunk，然后store就可以帮你调用这个函数，形参直接就是dispatch可以\n    //异步action中一般回调用同步action，可以发现异步action不是一定要用的，客人可以直接等5分钟再报菜名\n    return (dispatch) => {\n        setTimeout(() => {\n            dispatch(createIncrementAction(data))\n        },time)\n        \n    }\n}\n"]},"metadata":{},"sourceType":"module"}