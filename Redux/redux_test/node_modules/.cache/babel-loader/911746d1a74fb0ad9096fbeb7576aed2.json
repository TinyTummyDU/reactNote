{"ast":null,"code":"// store是很重要，但是你可以借助 import { createStore } from \"redux\"\n// 但是reducer是你自己写的，也重要\n// 1.该文件适用于创建一个为Count组件服务的reducer，其本质就是一个函数\n// 2.reducer函数会接到两个函数，分别为：之前的状态previousState和动作对象action\nconst initState = 0; // 没有传preState或者是undefined，形参默认值就可以用\n\nexport default function countReducer() {\n  let preState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // 用形参默认值更好\n  // if(preState === undefined) preState = 0;\n  const {\n    type,\n    data\n  } = action; // if(type == \"increment\")\n  // 一般不写if，写switch case\n  //根据type决定如何加工数据\n\n  switch (type) {\n    case \"increment\":\n      return preState + data;\n    //break; return了，break就没用了\n\n    case \"decrement\":\n      return preState - data;\n    //奇数加和异步加，我们不用管，我们只写最基础的就行。 这个意思就是 纯函数！！！！！！\n\n    default:\n      //不说加还是减，就是初始化的时候，是整个一加载，store就会告诉reducer你给我初始化一下\n      // preState是undefined\n      return preState;\n  }\n}","map":{"version":3,"sources":["/Users/dyq/Desktop/Redux/redux_test/src/components/redux/count_reducer.js"],"names":["initState","countReducer","preState","action","type","data"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA,MAAMA,SAAS,GAAG,CAAlB,C,CACA;;AACA,eAAe,SAASC,YAAT,GAAoD;AAAA,MAA9BC,QAA8B,uEAAnBF,SAAmB;AAAA,MAARG,MAAQ;AACjE;AACA;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAiBF,MAAvB,CAJiE,CAKjE;AACA;AAEA;;AACA,UAAQC,IAAR;AACE,SAAK,WAAL;AACE,aAAOF,QAAQ,GAAGG,IAAlB;AACF;;AACA,SAAK,WAAL;AACE,aAAOH,QAAQ,GAAGG,IAAlB;AACF;;AACA;AACE;AACA;AACA,aAAOH,QAAP;AAVJ;AAYD","sourcesContent":["// store是很重要，但是你可以借助 import { createStore } from \"redux\"\n// 但是reducer是你自己写的，也重要\n\n// 1.该文件适用于创建一个为Count组件服务的reducer，其本质就是一个函数\n// 2.reducer函数会接到两个函数，分别为：之前的状态previousState和动作对象action\n\nconst initState = 0;\n// 没有传preState或者是undefined，形参默认值就可以用\nexport default function countReducer(preState = initState, action) {\n  // 用形参默认值更好\n  // if(preState === undefined) preState = 0;\n\n  const { type, data } = action;\n  // if(type == \"increment\")\n  // 一般不写if，写switch case\n\n  //根据type决定如何加工数据\n  switch (type) {\n    case \"increment\":\n      return preState + data;\n    //break; return了，break就没用了\n    case \"decrement\":\n      return preState - data;\n    //奇数加和异步加，我们不用管，我们只写最基础的就行。 这个意思就是 纯函数！！！！！！\n    default:\n      //不说加还是减，就是初始化的时候，是整个一加载，store就会告诉reducer你给我初始化一下\n      // preState是undefined\n      return preState;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}