{"ast":null,"code":"//count_action_creator\n//每个组件都有一个\n//该文件专门为Count组件生成action对象\nimport{INCREMENT,DECREMENT}from\"../constant\";// function createIncrementAction(data){\n//     // data key和value同名就可以这样写\n//     return {type:'increment',data}\n// }\n// const createIncrementAction = data => {return {type:'increment',data}}\nexport var createIncrementAction=function createIncrementAction(data){return{type:INCREMENT,data:data};};// function createDecrementAction(data){\n//     return {type:'decrement',data}\n// }\nexport var createDecrementAction=function createDecrementAction(data){return{type:DECREMENT,data:data};};//异步action\nexport var createIncrementAsyncAction=function createIncrementAsyncAction(data,time){//返回一个函数，但是这个函数并没有被调用\n//store比较守旧，他一直要的都是plain object\n//此时我们就需要一个中间件 redux-thunk，然后store就可以帮你调用这个函数，形参直接就是dispatch可以\n//异步action中一般回调用同步action，可以发现异步action不是一定要用的，客人可以直接等5分钟再报菜名\nreturn function(dispatch){setTimeout(function(){dispatch(createIncrementAction(data));},time);};};","map":{"version":3,"sources":["/Users/dyq/Desktop/react/Redux/redux_test/src/redux/actions/count.js"],"names":["INCREMENT","DECREMENT","createIncrementAction","data","type","createDecrementAction","createIncrementAsyncAction","time","dispatch","setTimeout"],"mappings":"AACA;AACA;AACA;AAEA,OAASA,SAAT,CAAmBC,SAAnB,KAAoC,aAApC,CAGA;AACA;AACA;AACA;AAEA;AACA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAAAC,IAAI,QAAK,CAACC,IAAI,CAACJ,SAAN,CAAgBG,IAAI,CAAJA,IAAhB,CAAL,EAAlC,CAGP;AACA;AACA;AAEA,MAAO,IAAME,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAAAF,IAAI,QAAK,CAACC,IAAI,CAACH,SAAN,CAAgBE,IAAI,CAAJA,IAAhB,CAAL,EAAlC,CAIP;AACA,MAAO,IAAMG,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAACH,IAAD,CAAMI,IAAN,CAAc,CACpD;AACA;AACA;AACA;AACA,MAAO,UAACC,QAAD,CAAc,CACjBC,UAAU,CAAC,UAAM,CACbD,QAAQ,CAACN,qBAAqB,CAACC,IAAD,CAAtB,CAAR,CACH,CAFS,CAERI,IAFQ,CAAV,CAIH,CALD,CAMH,CAXM","sourcesContent":["\n//count_action_creator\n//每个组件都有一个\n//该文件专门为Count组件生成action对象\n\nimport { INCREMENT,DECREMENT } from \"../constant\"\n\n\n// function createIncrementAction(data){\n//     // data key和value同名就可以这样写\n//     return {type:'increment',data}\n// }\n\n// const createIncrementAction = data => {return {type:'increment',data}}\nexport const createIncrementAction = data => ({type:INCREMENT,data})\n\n\n// function createDecrementAction(data){\n//     return {type:'decrement',data}\n// }\n\nexport const createDecrementAction = data => ({type:DECREMENT,data})\n\n\n\n//异步action\nexport const createIncrementAsyncAction = (data,time)=> {\n    //返回一个函数，但是这个函数并没有被调用\n    //store比较守旧，他一直要的都是plain object\n    //此时我们就需要一个中间件 redux-thunk，然后store就可以帮你调用这个函数，形参直接就是dispatch可以\n    //异步action中一般回调用同步action，可以发现异步action不是一定要用的，客人可以直接等5分钟再报菜名\n    return (dispatch) => {\n        setTimeout(() => {\n            dispatch(createIncrementAction(data))\n        },time)\n        \n    }\n}\n"]},"metadata":{},"sourceType":"module"}