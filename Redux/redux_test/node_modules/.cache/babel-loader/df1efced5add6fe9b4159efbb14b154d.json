{"ast":null,"code":"// 容器组件不能rcc，他是一个桥梁\n// 引入左手引入右手\n//引入Count的UI组件(左手)\nimport CountUI from '../../components/Count'; //引入redux，就把最核心的store引入就行(右手)\n// import store from '../../redux/store'\n// 右手：容器组件的  store  需要在App.jsx里面用props引入\n//引入connect用于连接UI组件与redux\n\nimport { connect } from 'react-redux'; //本质上，a传递状态\n//你没有机会写 <CountUI a=\"1\">，我们通过函数的返回值来传递a=\"1\"\n//a函数返回的对象中的key就作为传递给UI组件的props的key\n//value就作为传递给UI组件props的value\n// react-redux已经自动帮你接收了state\n\nfunction a(state) {\n  return {\n    count: state\n  }; //相当于<CountUI n={900} />\n} // 本质上，b传递操作状态的方法\n//a函数返回的对象中的key就作为传递给UI组件的props的key\n//value就作为传递给UI组件props的value\n\n\nfunction b() {\n  return {\n    jia: data => {\n      console.log(data);\n    }\n  };\n} // 连接左右手\n// connect是一个函数，返回值还是一个函数，左手连接，就是放入参数在第二个函数中\n// UI组件是容器组件的子组件，那么我们直接渲染容器组件就行\n// connect第一次调用的时候传入两个参数，且必须是参数\n\n\nexport default connect(a, b)(CountUI); // const CountContainer = connect()(CountUI)\n// 虽然不直观，但是其实容器组件是UI组件的父组件\n// 那不直观，如何父亲给儿子传递props呢","map":{"version":3,"sources":["/Users/dyq/Desktop/react/Redux/redux_test/src/containers/Count/index.jsx"],"names":["CountUI","connect","a","state","count","b","jia","data","console","log"],"mappings":"AAAA;AACA;AAEA;AACA,OAAOA,OAAP,MAAoB,wBAApB,C,CAGA;AACA;AACA;AAEA;;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAGA;AAEA;AACA;AACA;AACA;;AACA,SAASC,CAAT,CAAWC,KAAX,EAAiB;AACb,SAAO;AAACC,IAAAA,KAAK,EAACD;AAAP,GAAP,CADa,CAEb;AACH,C,CAED;AAEA;AACA;;;AACA,SAASE,CAAT,GAAY;AACR,SAAO;AAACC,IAAAA,GAAG,EAAEC,IAAD,IAAQ;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAAmB;AAAjC,GAAP;AACH,C,CAED;AACA;AACA;AACA;;;AACA,eAAeN,OAAO,CAACC,CAAD,EAAGG,CAAH,CAAP,CAAaL,OAAb,CAAf,C,CACA;AAGA;AACA","sourcesContent":["// 容器组件不能rcc，他是一个桥梁\n// 引入左手引入右手\n\n//引入Count的UI组件(左手)\nimport CountUI from '../../components/Count'\n\n\n//引入redux，就把最核心的store引入就行(右手)\n// import store from '../../redux/store'\n// 右手：容器组件的  store  需要在App.jsx里面用props引入\n\n//引入connect用于连接UI组件与redux\nimport {connect} from 'react-redux'\n\n\n//本质上，a传递状态\n\n//你没有机会写 <CountUI a=\"1\">，我们通过函数的返回值来传递a=\"1\"\n//a函数返回的对象中的key就作为传递给UI组件的props的key\n//value就作为传递给UI组件props的value\n// react-redux已经自动帮你接收了state\nfunction a(state){\n    return {count:state}\n    //相当于<CountUI n={900} />\n}\n\n// 本质上，b传递操作状态的方法\n\n//a函数返回的对象中的key就作为传递给UI组件的props的key\n//value就作为传递给UI组件props的value\nfunction b(){\n    return {jia:(data)=>{console.log(data);}}\n}\n\n// 连接左右手\n// connect是一个函数，返回值还是一个函数，左手连接，就是放入参数在第二个函数中\n// UI组件是容器组件的子组件，那么我们直接渲染容器组件就行\n// connect第一次调用的时候传入两个参数，且必须是参数\nexport default connect(a,b)(CountUI)\n// const CountContainer = connect()(CountUI)\n\n\n// 虽然不直观，但是其实容器组件是UI组件的父组件\n// 那不直观，如何父亲给儿子传递props呢"]},"metadata":{},"sourceType":"module"}