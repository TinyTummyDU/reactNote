{"ast":null,"code":"var _jsxFileName = \"/Users/dyq/react/project/react_tianyu/src/components/Search/index.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Search extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.search = () => {\n      //获取用户的输入\n      //常规解构复制\n      // const {value} = this.keyWordElement;\n      // console.log(value);\n      //连续解构赋值，这种写法就只定义了一个value变量，如果value还是一个对象，还可以继续写下去\n      // const {a:{b:{c}}} = abj\n      //连续解构赋值还可以再改名，我不想用c这个名字，想用data这个名字\n      // const {a:{b:{c:data}}} = abj\n      const {\n        keyWordElement: {\n          value: keyWord\n        }\n      } = this; //发送网络请求\n      //短时间内多次访问，可能会401，拒绝请求\n      //解决方法：通过一个中间件5000，但是同理多次请求也会驳回\n      //我们的5000还有第二个接口，在github不给数据的时候，我们通过这个接口得到假数据\n      //配了setupProxy以后就可以站在3000给3000发\n      //api1必须紧随端口号，它是前缀\n      // axios.get(`http://localhost:3000/api1/search/users?q=${keyWord}`).then(\n      //如果你站在3000给3000发，前面的其实可以省略\n\n      axios.get(`api1/search/users?q=${keyWord}`).then(response => {\n        this.props.updateAppState(response.data.items);\n      }, error => {\n        console.log('失败了', error);\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"jumbotron\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"jumbotron-heading\",\n        children: \"\\u641C\\u7D22github\\u7528\\u6237\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: c => {\n            this.keyWordElement = c;\n          },\n          type: \"text\",\n          placeholder: \"\\u8F93\\u5165\\u5173\\u952E\\u8BCD\\u70B9\\u51FB\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.search,\n          children: \"\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/dyq/react/project/react_tianyu/src/components/Search/index.jsx"],"names":["React","Component","axios","Search","search","keyWordElement","value","keyWord","get","then","response","props","updateAppState","data","items","error","console","log","render","c"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,eAAe,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAAA;AAAA;;AAAA,SAE1CG,MAF0C,GAEjC,MAAM;AACX;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,YAAM;AAACC,QAAAA,cAAc,EAAC;AAACC,UAAAA,KAAK,EAACC;AAAP;AAAhB,UAAmC,IAAzC,CAZW,CAeX;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACAL,MAAAA,KAAK,CAACM,GAAN,CAAW,uBAAsBD,OAAQ,EAAzC,EAA4CE,IAA5C,CACIC,QAAQ,IAAI;AACR,aAAKC,KAAL,CAAWC,cAAX,CAA0BF,QAAQ,CAACG,IAAT,CAAcC,KAAxC;AACH,OAHL,EAIIC,KAAK,IAAI;AAACC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBF,KAAlB;AAA0B,OAJxC;AAOH,KAjCyC;AAAA;;AAoC1CG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAS,MAAA,SAAS,EAAC,WAAnB;AAAA,8BACA;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,gCACE;AAAO,UAAA,GAAG,EAAGC,CAAD,IAAK;AAAC,iBAAKd,cAAL,GAAoBc,CAApB;AAAsB,WAAxC;AAA0C,UAAA,IAAI,EAAC,MAA/C;AAAsD,UAAA,WAAW,EAAC;AAAlE;AAAA;AAAA;AAAA;AAAA,gBADF,uBAEQ;AAAQ,UAAA,OAAO,EAAE,KAAKf,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFR;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AA9CyC","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\nexport default class Search extends Component {\n\n    search = () => {\n        //获取用户的输入\n\n        //常规解构复制\n        // const {value} = this.keyWordElement;\n        // console.log(value);\n\n        //连续解构赋值，这种写法就只定义了一个value变量，如果value还是一个对象，还可以继续写下去\n        // const {a:{b:{c}}} = abj\n        //连续解构赋值还可以再改名，我不想用c这个名字，想用data这个名字\n        // const {a:{b:{c:data}}} = abj\n\n        const {keyWordElement:{value:keyWord}} = this\n\n \n        //发送网络请求\n        //短时间内多次访问，可能会401，拒绝请求\n        //解决方法：通过一个中间件5000，但是同理多次请求也会驳回\n        //我们的5000还有第二个接口，在github不给数据的时候，我们通过这个接口得到假数据\n\n        //配了setupProxy以后就可以站在3000给3000发\n        //api1必须紧随端口号，它是前缀\n        // axios.get(`http://localhost:3000/api1/search/users?q=${keyWord}`).then(\n        //如果你站在3000给3000发，前面的其实可以省略\n        axios.get(`api1/search/users?q=${keyWord}`).then(\n            response => {\n                this.props.updateAppState(response.data.items)\n            },\n            error => {console.log('失败了',error);}\n        )\n        \n    }\n\n\n    render() {\n        return (\n            <section className=\"jumbotron\">\n            <h3 className=\"jumbotron-heading\">搜索github用户</h3>\n            <div>\n              <input ref={(c)=>{this.keyWordElement=c}} type=\"text\" placeholder=\"输入关键词点击搜索\" />\n              &nbsp;<button onClick={this.search}>搜索</button>\n            </div>\n          </section>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}