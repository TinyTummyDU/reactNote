{"ast":null,"code":"var _jsxFileName = \"/Users/dyq/react/project/react_tianyu/src/App.jsx\";\nimport React, { Component } from 'react';\nimport Header from './components/Header';\nimport List from './components/List';\nimport Footer from './components/Footer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      todos: [{\n        id: '001',\n        name: '吃饭',\n        done: true\n      }, {\n        id: '002',\n        name: '睡觉',\n        done: true\n      }, {\n        id: '003',\n        name: '打代码',\n        done: false\n      }, {\n        id: '004',\n        name: '逛街',\n        done: false\n      }]\n    };\n\n    this.addTodo = todoObj => {\n      //获取原todos\n      const {\n        todos\n      } = this.state; //追加一个todo\n\n      const newTodos = [todoObj, ...todos]; // todos.unshift(todoObj) //不能用unshift，因为这样还是触犯了setState的必要性\n      //更新状态，回调用App的render，然后又回引发自组件的重新渲染\n\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.updateTodo = (id, done) => {\n      //获取状态中的todos\n      const {\n        todos\n      } = this.state; //匹配且处理数据\n\n      const newTodos = todos.map(todoObj => {\n        // 替换操作（先拷贝展开整体，再覆盖）\n        // if(todoObj.id === id) return {...todoObj,done:done}\n        //下面这行是上面这行的简写方式\n        if (todoObj.id === id) return { ...todoObj,\n          done\n        };else return todoObj;\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.deleteTodo = id => {\n      //获取原来的todos\n      const {\n        todos\n      } = this.state; //删除指定id的todo对象\n\n      const newTodos = todos.filter(todoObj => {\n        return todoObj.id !== id;\n      }); //更新状态\n\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.checkAllTodo = done => {\n      //获取原来的todos\n      const {\n        todos\n      } = this.state; //加工数据\n\n      const newTodos = todos.map(todoObj => {\n        return { ...todoObj,\n          done\n        };\n      }); //更新状态\n\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.clearAllDone = () => {\n      //获取原来的todos\n      const {\n        todos\n      } = this.state; //过滤数据\n\n      const newTodos = todos.filter(todoObj => {\n        return !todoObj.done;\n      }); //更新状态\n\n      this.setState({\n        todos: newTodos\n      });\n    };\n  }\n\n  render() {\n    const {\n      todos\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          addTodo: this.addTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          todos: todos,\n          updateTodo: this.updateTodo,\n          deleteTodo: this.deleteTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {\n          todos: todos,\n          checkAllTodo: this.checkAllTodo,\n          clearAllDone: this.clearAllDone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/dyq/react/project/react_tianyu/src/App.jsx"],"names":["React","Component","Header","List","Footer","App","state","todos","id","name","done","addTodo","todoObj","newTodos","setState","updateTodo","map","deleteTodo","filter","checkAllTodo","clearAllDone","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Header from './components/Header'\nimport List from './components/List'\nimport Footer from './components/Footer'\nimport './App.css'\n\nexport default class App extends Component {\n\t//状态在哪里，操作状态的方法就在哪里\n\n\t//初始化状态\n\tstate = {todos:[\n\t\t{id:'001',name:'吃饭',done:true},\n\t\t{id:'002',name:'睡觉',done:true},\n\t\t{id:'003',name:'打代码',done:false},\n\t\t{id:'004',name:'逛街',done:false}\n\t]}\n\n\t//addTodo用于添加一个todo，接收的参数是todo对象，该回调通过props父亲传给孩子\n\t//这种儿子向父亲发信息的方式，其实关键理解的地方，还是this指向\n\taddTodo = (todoObj)=>{\n\t\t//获取原todos\n\t\tconst {todos} = this.state\n\t\t//追加一个todo\n\t\tconst newTodos = [todoObj,...todos]\n\t\t// todos.unshift(todoObj) //不能用unshift，因为这样还是触犯了setState的必要性\n\t\t//更新状态，回调用App的render，然后又回引发自组件的重新渲染\n\t\tthis.setState({todos:newTodos})\n\t}\n\n\t//updateTodo用于更新一个todo对象\n\tupdateTodo = (id,done)=>{\n\t\t//获取状态中的todos\n\t\tconst {todos} = this.state\n\t\t//匹配且处理数据\n\t\tconst newTodos = todos.map((todoObj)=>{\n\t\t\t// 替换操作（先拷贝展开整体，再覆盖）\n\t\t\t// if(todoObj.id === id) return {...todoObj,done:done}\n\t\t\t//下面这行是上面这行的简写方式\n\t\t\tif(todoObj.id === id) return {...todoObj,done}\n\t\t\telse return todoObj\n\t\t})\n\t\tthis.setState({todos:newTodos})\n\t}\n\n\t//deleteTodo用于删除一个todo对象\n\tdeleteTodo = (id)=>{\n\t\t//获取原来的todos\n\t\tconst {todos} = this.state\n\t\t//删除指定id的todo对象\n\t\tconst newTodos = todos.filter((todoObj)=>{\n\t\t\treturn todoObj.id !== id\n\t\t})\n\t\t//更新状态\n\t\tthis.setState({todos:newTodos})\n\t}\n\n\t//checkAllTodo用于全选\n\tcheckAllTodo = (done)=>{\n\t\t//获取原来的todos\n\t\tconst {todos} = this.state\n\t\t//加工数据\n\t\tconst newTodos = todos.map((todoObj)=>{\n\t\t\treturn {...todoObj,done}\n\t\t})\n\t\t//更新状态\n\t\tthis.setState({todos:newTodos})\n\t}\n\n\t//clearAllDone用于清除所有已完成的\n\tclearAllDone = ()=>{\n\t\t//获取原来的todos\n\t\tconst {todos} = this.state\n\t\t//过滤数据\n\t\tconst newTodos = todos.filter((todoObj)=>{\n\t\t\treturn !todoObj.done\n\t\t})\n\t\t//更新状态\n\t\tthis.setState({todos:newTodos})\n\t}\n\n\trender() {\n\t\tconst {todos} = this.state\n\t\treturn (\n\t\t\t<div className=\"todo-container\">\n\t\t\t\t<div className=\"todo-wrap\">\n\t\t\t\t\t<Header addTodo={this.addTodo}/>\n                    {/* 父亲把todos通过props传给儿子 List */}\n\t\t\t\t\t<List todos={todos} updateTodo={this.updateTodo} deleteTodo={this.deleteTodo}/>\n\t\t\t\t\t<Footer todos={todos} checkAllTodo={this.checkAllTodo} clearAllDone={this.clearAllDone}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}