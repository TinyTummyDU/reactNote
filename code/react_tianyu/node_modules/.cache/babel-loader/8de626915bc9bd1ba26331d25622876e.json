{"ast":null,"code":"var _jsxFileName = \"/Users/dyq/react/project/react_tianyu/src/pages/Home/Message/Detail/index.jsx\";\nimport React, { Component } from \"react\"; // import qs from 'querystring'\n// const qs = require('query-string')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  id: \"01\",\n  content: \"你好中国\"\n}, {\n  id: \"02\",\n  content: \"爱你哦\"\n}, {\n  id: \"03\",\n  content: \"未来的自己\"\n}];\nexport default class Detail extends Component {\n  render() {\n    // console.log(this.props);\n    // 接收params参数\n    const {\n      id,\n      title\n    } = this.props.match.params; //接收search参数，search没帮你像是params一样在match里面整合为对象，你需要自己做（字符串分割），或者借助一个库（react已经有了，querystring）\n    // let obj = {name:'tom',age:18}\n    // name=tom&age=18\n    //这种编码形式叫做urlencoded编码\n    //用querystring库可以帮你，和json的方法有点像\n    //qs.stringify(obj)\n    //let obj1 = qs.parse(str)\n    // const {search} = this.props.location\n    // const {id,title} = qs.parse(search.slice(1))\n    //接收state参数\n\n    console.log(this.props); //没有缓存，为了不让其报错，我们可以给一个空对象\n    // const { id, title } = this.props.location.state || {};\n\n    const dataObj = data.find(obj => {\n      return obj.id === id;\n    }) || {};\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"ID:\", id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"TITLE:\", title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"CONTENT:\", dataObj.content]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/dyq/react/project/react_tianyu/src/pages/Home/Message/Detail/index.jsx"],"names":["React","Component","data","id","content","Detail","render","title","props","match","params","console","log","dataObj","find","obj"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AAEA;;;AAEA,MAAMC,IAAI,GAAG,CACX;AAAEC,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,OAAO,EAAE;AAArB,CADW,EAEX;AAAED,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,OAAO,EAAE;AAArB,CAFW,EAGX;AAAED,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,OAAO,EAAE;AAArB,CAHW,CAAb;AAKA,eAAe,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAC5CK,EAAAA,MAAM,GAAG;AACP;AAEA;AACA,UAAM;AAACH,MAAAA,EAAD;AAAII,MAAAA;AAAJ,QAAa,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAApC,CAJO,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAjB,EAjBO,CAkBP;AACA;;AAEA,UAAMK,OAAO,GAAGX,IAAI,CAACY,IAAL,CAAWC,GAAD,IAAS;AACjC,aAAOA,GAAG,CAACZ,EAAJ,KAAWA,EAAlB;AACD,KAFe,KAEV,EAFN;AAIA,wBACE;AAAA,8BACE;AAAA,0BAAQA,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,6BAAWI,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,+BAAaM,OAAO,CAACT,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAjC2C","sourcesContent":["import React, { Component } from \"react\";\n// import qs from 'querystring'\n\n// const qs = require('query-string')\n\nconst data = [\n  { id: \"01\", content: \"你好中国\" },\n  { id: \"02\", content: \"爱你哦\" },\n  { id: \"03\", content: \"未来的自己\" },\n];\nexport default class Detail extends Component {\n  render() {\n    // console.log(this.props);\n\n    // 接收params参数\n    const {id,title} = this.props.match.params\n\n    //接收search参数，search没帮你像是params一样在match里面整合为对象，你需要自己做（字符串分割），或者借助一个库（react已经有了，querystring）\n    // let obj = {name:'tom',age:18}\n    // name=tom&age=18\n    //这种编码形式叫做urlencoded编码\n    //用querystring库可以帮你，和json的方法有点像\n    //qs.stringify(obj)\n    //let obj1 = qs.parse(str)\n    // const {search} = this.props.location\n    // const {id,title} = qs.parse(search.slice(1))\n\n    //接收state参数\n    console.log(this.props);\n    //没有缓存，为了不让其报错，我们可以给一个空对象\n    // const { id, title } = this.props.location.state || {};\n\n    const dataObj = data.find((obj) => {\n      return obj.id === id;\n    }) || {};\n\n    return (\n      <ul>\n        <li>ID:{id}</li>\n        <li>TITLE:{title}</li>\n        <li>CONTENT:{dataObj.content}</li>\n      </ul>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}