{"ast":null,"code":"var _jsxFileName = \"/Users/dyq/react/project/react_tianyu/src/components/Search/index.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Search extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.search = () => {\n      //获取用户的输入\n      //常规解构复制\n      // const {value} = this.keyWordElement;\n      // console.log(value);\n      //连续解构赋值，这种写法就只定义了一个value变量，如果value还是一个对象，还可以继续写下去\n      // const {a:{b:{c}}} = abj\n      //连续解构赋值还可以再改名，我不想用c这个名字，想用data这个名字\n      // const {a:{b:{c:data}}} = abj\n      const {\n        keyWordElement: {\n          value: keyWord\n        }\n      } = this; //发送请求前，要求app更新状态：isFirst改为false，isLoading改为true\n\n      this.props.updateAppState({\n        isFirst: false,\n        isLoading: true\n      }); //发送网络请求\n      //短时间内多次访问，可能会401，拒绝请求\n      //解决方法：通过一个中间件5000，但是同理多次请求也会驳回\n      //我们的5000还有第二个接口，在github不给数据的时候，我们通过这个接口得到假数据\n      //配了setupProxy以后就可以站在3000给3000发\n      //api1必须紧随端口号，它是前缀\n      // axios.get(`http://localhost:3000/api1/search/users?q=${keyWord}`).then(\n      //如果你站在3000给3000发，前面的其实可以省略\n\n      axios.get(`api1/search/users212?q=${keyWord}`).then(response => {\n        //请求成功通知App更新状态\n        this.props.updateAppState({\n          isLoading: false,\n          users: response.data.items\n        });\n      }, error => {\n        //请求失败通知App更新状态\n        this.props.updateAppState({\n          isLoading: false,\n          //  不能存error对象，这样的话直接页面就会爆，你要存错误对象的一个属性\n          err: error.message\n        });\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"jumbotron\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"jumbotron-heading\",\n        children: \"\\u641C\\u7D22github\\u7528\\u6237\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: c => {\n            this.keyWordElement = c;\n          },\n          type: \"text\",\n          placeholder: \"\\u8F93\\u5165\\u5173\\u952E\\u8BCD\\u70B9\\u51FB\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.search,\n          children: \"\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/dyq/react/project/react_tianyu/src/components/Search/index.jsx"],"names":["React","Component","axios","Search","search","keyWordElement","value","keyWord","props","updateAppState","isFirst","isLoading","get","then","response","users","data","items","error","err","message","render","c"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,eAAe,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAAA;AAAA;;AAAA,SAC5CG,MAD4C,GACnC,MAAM;AACb;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,YAAM;AACJC,QAAAA,cAAc,EAAE;AAAEC,UAAAA,KAAK,EAAEC;AAAT;AADZ,UAEF,IAFJ,CAZa,CAgBb;;AACA,WAAKC,KAAL,CAAWC,cAAX,CAA0B;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,SAAS,EAAE;AAA7B,OAA1B,EAjBa,CAmBb;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACAT,MAAAA,KAAK,CAACU,GAAN,CAAW,0BAAyBL,OAAQ,EAA5C,EAA+CM,IAA/C,CACGC,QAAD,IAAc;AACV;AACF,aAAKN,KAAL,CAAWC,cAAX,CAA0B;AACxBE,UAAAA,SAAS,EAAE,KADa;AAExBI,UAAAA,KAAK,EAAED,QAAQ,CAACE,IAAT,CAAcC;AAFG,SAA1B;AAID,OAPH,EAQGC,KAAD,IAAW;AACP;AACF,aAAKV,KAAL,CAAWC,cAAX,CAA0B;AACxBE,UAAAA,SAAS,EAAE,KADa;AAE1B;AACEQ,UAAAA,GAAG,EAACD,KAAK,CAACE;AAHc,SAA1B;AAKD,OAfH;AAiBD,KA9C2C;AAAA;;AAgD5CC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAS,MAAA,SAAS,EAAC,WAAnB;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AACE,UAAA,GAAG,EAAGC,CAAD,IAAO;AACV,iBAAKjB,cAAL,GAAsBiB,CAAtB;AACD,WAHH;AAIE,UAAA,IAAI,EAAC,MAJP;AAKE,UAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,gBADF,uBAQQ;AAAQ,UAAA,OAAO,EAAE,KAAKlB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARR;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAhE2C","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nexport default class Search extends Component {\n  search = () => {\n    //获取用户的输入\n\n    //常规解构复制\n    // const {value} = this.keyWordElement;\n    // console.log(value);\n\n    //连续解构赋值，这种写法就只定义了一个value变量，如果value还是一个对象，还可以继续写下去\n    // const {a:{b:{c}}} = abj\n    //连续解构赋值还可以再改名，我不想用c这个名字，想用data这个名字\n    // const {a:{b:{c:data}}} = abj\n\n    const {\n      keyWordElement: { value: keyWord },\n    } = this;\n\n    //发送请求前，要求app更新状态：isFirst改为false，isLoading改为true\n    this.props.updateAppState({ isFirst: false, isLoading: true });\n\n    //发送网络请求\n    //短时间内多次访问，可能会401，拒绝请求\n    //解决方法：通过一个中间件5000，但是同理多次请求也会驳回\n    //我们的5000还有第二个接口，在github不给数据的时候，我们通过这个接口得到假数据\n\n    //配了setupProxy以后就可以站在3000给3000发\n    //api1必须紧随端口号，它是前缀\n    // axios.get(`http://localhost:3000/api1/search/users?q=${keyWord}`).then(\n    //如果你站在3000给3000发，前面的其实可以省略\n    axios.get(`api1/search/users212?q=${keyWord}`).then(\n      (response) => {\n          //请求成功通知App更新状态\n        this.props.updateAppState({\n          isLoading: false,\n          users: response.data.items,\n        });\n      },\n      (error) => {\n          //请求失败通知App更新状态\n        this.props.updateAppState({\n          isLoading: false,\n        //  不能存error对象，这样的话直接页面就会爆，你要存错误对象的一个属性\n          err:error.message\n        });\n      }\n    );\n  };\n\n  render() {\n    return (\n      <section className=\"jumbotron\">\n        <h3 className=\"jumbotron-heading\">搜索github用户</h3>\n        <div>\n          <input\n            ref={(c) => {\n              this.keyWordElement = c;\n            }}\n            type=\"text\"\n            placeholder=\"输入关键词点击搜索\"\n          />\n          &nbsp;<button onClick={this.search}>搜索</button>\n        </div>\n      </section>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}