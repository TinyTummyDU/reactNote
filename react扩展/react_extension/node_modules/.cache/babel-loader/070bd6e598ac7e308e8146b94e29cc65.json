{"ast":null,"code":"var _jsxFileName = \"/Users/dyq/Desktop/react/react\\u6269\\u5C55/react_extension/src/components/5_Context/index.jsx\";\nimport React, { Component } from \"react\";\nimport \"./index.css\"; //为什么大写，因为你如果后续使用，<MyContext.Provider>，组件标签要大写\n//或者 const {provider} = MyContext\n//创建Context对象\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/React.createContext();\nexport default class A extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      username: \"tom\",\n      age: 18\n    };\n  }\n\n  render() {\n    const {\n      username,\n      age\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6211\\u662FA\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"\\u6211\\u7684\\u7528\\u6237\\u540D\\u662F\", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n        value: {\n          username,\n          age\n        },\n        children: /*#__PURE__*/_jsxDEV(B, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass B extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"child\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6211\\u662FB\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(C, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n} // class C extends Component {\n//     //声明\n//     static contextType = MyContext\n//     render() {\n//         return (\n//             <div className=\"grand\">\n//             <h3>我是C组件</h3>\n//             <h4>我从A接收到用户名是{this.context.username}</h4>\n//             <h4>年龄{this.context.age}</h4>\n//             </div>\n//         )\n//     }\n// }\n//如果C是函数式组件\n//没有static，没有this，那么我们就用第二种使用Context的方式\n\n\nfunction C() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grand\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u6211\\u662FC\\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"\\u6211\\u4ECEA\\u63A5\\u6536\\u5230\\u7528\\u6237\\u540D\\u662F\", /*#__PURE__*/_jsxDEV(MyContext.Consumer, {\n        children: //value就是provider传下来的\n        value => {\n          return `${value.username},年龄是${value.age}`;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_c = C;\n\nvar _c;\n\n$RefreshReg$(_c, \"C\");","map":{"version":3,"sources":["/Users/dyq/Desktop/react/react扩展/react_extension/src/components/5_Context/index.jsx"],"names":["React","Component","MyContext","createContext","A","state","username","age","render","B","C","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP,C,CAEA;AACA;AACA;;;AACA,MAAMC,SAAS,gBAAGF,KAAK,CAACG,aAAN,EAAlB;AAEA,eAAe,MAAMC,CAAN,SAAgBH,SAAhB,CAA0B;AAAA;AAAA;AAAA,SACvCI,KADuC,GAC/B;AAAEC,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,GAAG,EAAE;AAAxB,KAD+B;AAAA;;AAEvCC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEF,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAoB,KAAKF,KAA/B;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,2DAAWC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAME,QAAC,SAAD,CAAW,QAAX;AAAoB,QAAA,KAAK,EAAE;AAAEA,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,SAA3B;AAAA,+BACE,QAAC,CAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AAjBsC;;AAoBzC,MAAME,CAAN,SAAgBR,SAAhB,CAA0B;AACxBO,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,CAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AARuB,C,CAW1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA,SAASE,CAAT,GAAa;AACX,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,yFAEE,QAAC,SAAD,CAAW,QAAX;AAAA,kBAEI;AACCC,QAAAA,KAAD,IAAW;AACT,iBAAQ,GAAEA,KAAK,CAACL,QAAS,OAAMK,KAAK,CAACJ,GAAI,EAAzC;AACD;AALL;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;KAjBQG,C","sourcesContent":["import React, { Component } from \"react\";\nimport \"./index.css\";\n\n//为什么大写，因为你如果后续使用，<MyContext.Provider>，组件标签要大写\n//或者 const {provider} = MyContext\n//创建Context对象\nconst MyContext = React.createContext();\n\nexport default class A extends Component {\n  state = { username: \"tom\", age: 18 };\n  render() {\n    const { username, age } = this.state;\n\n    return (\n      <div className=\"parent\">\n        <h3>我是A组件</h3>\n        <h4>我的用户名是{username}</h4>\n\n        {/* 包裹以后，谁想要value，谁就要声明，即举手 */}\n        {/* 属性必须交value */}\n        <MyContext.Provider value={{ username, age }}>\n          <B />\n        </MyContext.Provider>\n      </div>\n    );\n  }\n}\n\nclass B extends Component {\n  render() {\n    return (\n      <div className=\"child\">\n        <h3>我是B组件</h3>\n        <C />\n      </div>\n    );\n  }\n}\n\n// class C extends Component {\n//     //声明\n//     static contextType = MyContext\n//     render() {\n//         return (\n//             <div className=\"grand\">\n//             <h3>我是C组件</h3>\n//             <h4>我从A接收到用户名是{this.context.username}</h4>\n//             <h4>年龄{this.context.age}</h4>\n//             </div>\n//         )\n//     }\n// }\n\n//如果C是函数式组件\n//没有static，没有this，那么我们就用第二种使用Context的方式\nfunction C() {\n  return (\n    <div className=\"grand\">\n      <h3>我是C组件</h3>\n      <h4>\n        我从A接收到用户名是\n        <MyContext.Consumer>\n          {\n            //value就是provider传下来的\n            (value) => {\n              return `${value.username},年龄是${value.age}`;\n            }\n          }\n        </MyContext.Consumer>\n      </h4>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}