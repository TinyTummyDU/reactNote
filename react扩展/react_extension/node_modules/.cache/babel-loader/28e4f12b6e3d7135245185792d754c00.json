{"ast":null,"code":"var _jsxFileName = \"/Users/dyq/Desktop/react/react\\u6269\\u5C55/react_extension/src/components/3_hooks/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\"; //类式组件\n// class Demo extends Component {\n//     state = {count:0}\n//     add = () => {\n//         this.setState(state => ({count:state.count+1}))\n//     }\n//     componentDidMount(){\n//         //把定时器实例挂载到自身\n//         this.timer = setInterval(()=>{\n//             this.setState(state=>({count:state.count+1}))\n//         },1000)\n//     }\n//     unmount = () => {\n//         ReactDOM.unmountComponentAtNode(document.getElementById('root'))\n//     }\n//     componentWillUnmount(){\n//         clearInterval(this.timer)\n//     }\n//     //第三种写法，ref容器\n//     myRef = React.createRef()\n//     show = () => {\n//         alert(this.myRef.current.value)\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <input type=\"text\" ref={this.myRef}></input>\n//                 <button onClick={this.show}>点我展示input内容</button>\n//                 <h2>当前求和为{this.state.count}</h2>\n//                 <button onClick={this.add}>点我+1</button>\n//                 <button onClick={this.unmount}>点我卸载</button>\n//             </div>\n//         )\n//     }\n// }\n//函数式组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Demo() {\n  _s();\n\n  //数组的结构赋值(按照位数写就行)\n  const [count, setCount] = React.useState(0); // console.log(count,setCount);\n\n  function add() {\n    //第一种setCount的方法\n    // setCount(count + 1);\n    //第二种setCount的写法\n    setCount(count => count + 1);\n  }\n\n  function unmount() {\n    ReactDOM.unmountComponentAtNode(document.getElementById(\"root\"));\n  } //可以接受两个参数\n\n\n  React.useEffect(() => {\n    let timer = setInterval(() => {\n      setCount(count => count + 1);\n    }, 1000); // useEffect的第一个参数的返回的那个函数就相当于componentWillUnmount\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  const myRef = React.useRef();\n\n  function show() {\n    alert(myRef.current.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: myRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: show,\n      children: \"\\u70B9\\u6211\\u5C55\\u793Ainput\\u5185\\u5BB9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"\\u70B9\\u6211+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: unmount,\n      children: \"\\u70B9\\u6211\\u5378\\u8F7D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Demo, \"lkfi1GFnpK070qOOuY/RFJ9WHek=\");\n\n_c = Demo;\nexport default Demo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Demo\");","map":{"version":3,"sources":["/Users/dyq/Desktop/react/react扩展/react_extension/src/components/3_hooks/index.jsx"],"names":["React","Component","ReactDOM","Demo","count","setCount","useState","add","unmount","unmountComponentAtNode","document","getElementById","useEffect","timer","setInterval","clearInterval","myRef","useRef","show","alert","current","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA,SAASC,IAAT,GAAgB;AAAA;;AACd;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,KAAK,CAACM,QAAN,CAAe,CAAf,CAA1B,CAFc,CAGd;;AAEA,WAASC,GAAT,GAAe;AACb;AACA;AACA;AACAF,IAAAA,QAAQ,CAAED,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;AACD;;AAED,WAASI,OAAT,GAAmB;AACjBN,IAAAA,QAAQ,CAACO,sBAAT,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhC;AACD,GAda,CAgBd;;;AACAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAIC,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC5BT,MAAAA,QAAQ,CAAED,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;AACD,KAFsB,EAEpB,IAFoB,CAAvB,CADoB,CAIpB;;AACA,WAAO,MAAM;AACXW,MAAAA,aAAa,CAACF,KAAD,CAAb;AACD,KAFD;AAGD,GARD,EAQG,EARH;AAUA,QAAMG,KAAK,GAAGhB,KAAK,CAACiB,MAAN,EAAd;;AAEA,WAASC,IAAT,GAAe;AACbC,IAAAA,KAAK,CAACH,KAAK,CAACI,OAAN,CAAcC,KAAf,CAAL;AACD;;AAED,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,GAAG,EAAEL;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEE,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,yDAAWd,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,OAAO,EAAEG,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA1CQL,I;;KAAAA,I;AA4CT,eAAeA,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n//类式组件\n// class Demo extends Component {\n\n//     state = {count:0}\n//     add = () => {\n//         this.setState(state => ({count:state.count+1}))\n//     }\n\n//     componentDidMount(){\n//         //把定时器实例挂载到自身\n//         this.timer = setInterval(()=>{\n//             this.setState(state=>({count:state.count+1}))\n//         },1000)\n//     }\n\n//     unmount = () => {\n//         ReactDOM.unmountComponentAtNode(document.getElementById('root'))\n//     }\n\n//     componentWillUnmount(){\n//         clearInterval(this.timer)\n//     }\n\n//     //第三种写法，ref容器\n//     myRef = React.createRef()\n\n//     show = () => {\n//         alert(this.myRef.current.value)\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <input type=\"text\" ref={this.myRef}></input>\n//                 <button onClick={this.show}>点我展示input内容</button>\n//                 <h2>当前求和为{this.state.count}</h2>\n//                 <button onClick={this.add}>点我+1</button>\n//                 <button onClick={this.unmount}>点我卸载</button>\n//             </div>\n//         )\n//     }\n// }\n\n//函数式组件\nfunction Demo() {\n  //数组的结构赋值(按照位数写就行)\n  const [count, setCount] = React.useState(0);\n  // console.log(count,setCount);\n\n  function add() {\n    //第一种setCount的方法\n    // setCount(count + 1);\n    //第二种setCount的写法\n    setCount((count) => count + 1);\n  }\n\n  function unmount() {\n    ReactDOM.unmountComponentAtNode(document.getElementById(\"root\"));\n  }\n\n  //可以接受两个参数\n  React.useEffect(() => {\n    let timer = setInterval(() => {\n      setCount((count) => count + 1);\n    }, 1000);\n    // useEffect的第一个参数的返回的那个函数就相当于componentWillUnmount\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  const myRef = React.useRef();\n\n  function show(){\n    alert(myRef.current.value)\n  }\n\n  return (\n    <div>\n      <input type=\"text\" ref={myRef}></input>\n      <button onClick={show}>点我展示input内容</button>\n      <h2>当前求和为：{count}</h2>\n      <button onClick={add}>点我+1</button>\n      <button onClick={unmount}>点我卸载</button>\n    </div>\n  );\n}\n\nexport default Demo;\n"]},"metadata":{},"sourceType":"module"}