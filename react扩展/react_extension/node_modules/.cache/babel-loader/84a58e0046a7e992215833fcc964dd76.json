{"ast":null,"code":"var _jsxFileName = \"/Users/dyq/Desktop/react/react\\u6269\\u5C55/react_extension/src/components/3_hooks/index.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\"; //类式组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Demo extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      count: 0\n    };\n\n    this.add = () => {\n      this.setState(state => ({\n        count: state.count + 1\n      }));\n    };\n\n    this.unmount = () => {\n      ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n    };\n\n    this.myRef = React.createRef;\n  }\n\n  componentDidMount() {\n    //把定时器实例挂载到自身\n    this.timer = setInterval(() => {\n      this.setState(state => ({\n        count: state.count + 1\n      }));\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  } //第三种写法，ref容器\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: this.myRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.add,\n        children: \"\\u70B9\\u6211+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.unmount,\n        children: \"\\u70B9\\u6211\\u5378\\u8F7D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n\n} //函数式组件\n// function Demo() {\n//   //数组的结构赋值(按照位数写就行)\n//   const [count, setCount] = React.useState(0);\n//   // console.log(count,setCount);\n//   function add() {\n//     //第一种setCount的方法\n//     // setCount(count + 1);\n//     //第二种setCount的写法\n//     setCount((count) => count + 1);\n//   }\n//   function unmount() {\n//     ReactDOM.unmountComponentAtNode(document.getElementById(\"root\"));\n//   }\n//   //可以接受两个参数\n//   React.useEffect(() => {\n//     let timer = setInterval(() => {\n//         setCount(count=> count+1)\n//     }, 1000);\n//     // useEffect的第一个参数的返回的那个函数就相当于componentWillUnmount\n//     return ()=>{\n//         clearInterval(timer)\n//     }\n// }, []);\n//   return (\n//     <div>\n//       <h2>当前求和为：{count}</h2>\n//       <button onClick={add}>点我+1</button>\n//       <button onClick={unmount}>点我卸载</button>\n//     </div>\n//   );\n// }\n\n\nexport default Demo;","map":{"version":3,"sources":["/Users/dyq/Desktop/react/react扩展/react_extension/src/components/3_hooks/index.jsx"],"names":["React","Component","ReactDOM","Demo","state","count","add","setState","unmount","unmountComponentAtNode","document","getElementById","myRef","createRef","componentDidMount","timer","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;;;AACA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAEzBG,KAFyB,GAEjB;AAACC,MAAAA,KAAK,EAAC;AAAP,KAFiB;;AAAA,SAGzBC,GAHyB,GAGnB,MAAM;AACR,WAAKC,QAAL,CAAcH,KAAK,KAAK;AAACC,QAAAA,KAAK,EAACD,KAAK,CAACC,KAAN,GAAY;AAAnB,OAAL,CAAnB;AACH,KALwB;;AAAA,SAczBG,OAdyB,GAcf,MAAM;AACZN,MAAAA,QAAQ,CAACO,sBAAT,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhC;AACH,KAhBwB;;AAAA,SAuBzBC,KAvByB,GAuBjBZ,KAAK,CAACa,SAvBW;AAAA;;AAOzBC,EAAAA,iBAAiB,GAAE;AACf;AACA,SAAKC,KAAL,GAAaC,WAAW,CAAC,MAAI;AACzB,WAAKT,QAAL,CAAcH,KAAK,KAAG;AAACC,QAAAA,KAAK,EAACD,KAAK,CAACC,KAAN,GAAY;AAAnB,OAAH,CAAnB;AACH,KAFuB,EAEtB,IAFsB,CAAxB;AAGH;;AAMDY,EAAAA,oBAAoB,GAAE;AAClBC,IAAAA,aAAa,CAAC,KAAKH,KAAN,CAAb;AACH,GApBwB,CAsBzB;;;AAGAI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,GAAG,EAAE,KAAKP;AAA7B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,qDAAU,KAAKR,KAAL,CAAWC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,KAAKC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,OAAO,EAAE,KAAKE,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAlCwB,C,CAqC7B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeL,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n//类式组件\nclass Demo extends Component {\n\n    state = {count:0}\n    add = () => {\n        this.setState(state => ({count:state.count+1}))\n    }\n\n    componentDidMount(){\n        //把定时器实例挂载到自身\n        this.timer = setInterval(()=>{\n            this.setState(state=>({count:state.count+1}))\n        },1000)\n    }\n\n    unmount = () => {\n        ReactDOM.unmountComponentAtNode(document.getElementById('root'))\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.timer)\n    }\n\n    //第三种写法，ref容器\n    myRef = React.createRef\n\n    render() {\n        return (\n            <div>\n                <input type=\"text\" ref={this.myRef}></input>\n                <h2>当前求和为{this.state.count}</h2>\n                <button onClick={this.add}>点我+1</button>\n                <button onClick={this.unmount}>点我卸载</button>\n            </div>\n        )\n    }\n}\n\n//函数式组件\n// function Demo() {\n//   //数组的结构赋值(按照位数写就行)\n//   const [count, setCount] = React.useState(0);\n//   // console.log(count,setCount);\n\n//   function add() {\n//     //第一种setCount的方法\n//     // setCount(count + 1);\n//     //第二种setCount的写法\n//     setCount((count) => count + 1);\n//   }\n\n//   function unmount() {\n//     ReactDOM.unmountComponentAtNode(document.getElementById(\"root\"));\n//   }\n\n//   //可以接受两个参数\n//   React.useEffect(() => {\n//     let timer = setInterval(() => {\n//         setCount(count=> count+1)\n//     }, 1000);\n//     // useEffect的第一个参数的返回的那个函数就相当于componentWillUnmount\n//     return ()=>{\n//         clearInterval(timer)\n//     }\n// }, []);\n\n//   return (\n//     <div>\n//       <h2>当前求和为：{count}</h2>\n//       <button onClick={add}>点我+1</button>\n//       <button onClick={unmount}>点我卸载</button>\n//     </div>\n//   );\n// }\n\nexport default Demo;\n"]},"metadata":{},"sourceType":"module"}